# Generated by: Neurodocker version 0+unknown
# Latest release: Neurodocker version 0.7.0
# Timestamp: 2020/04/25 05:26:53 UTC
# 
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:
# 
#     https://github.com/ReproNim/neurodocker

Bootstrap: docker
From: debian:stretch

%post
su - root

export ND_ENTRYPOINT="/neurodocker/startup.sh"
apt-get update -qq
apt-get install -y -q --no-install-recommends \
    apt-utils \
    bzip2 \
    ca-certificates \
    curl \
    locales \
    unzip
apt-get clean
rm -rf /var/lib/apt/lists/*
sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
dpkg-reconfigure --frontend=noninteractive locales
update-locale LANG="en_US.UTF-8"
chmod 777 /opt && chmod a+s /opt
mkdir -p /neurodocker
if [ ! -f "$ND_ENTRYPOINT" ]; then
  echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT"
  echo 'set -e' >> "$ND_ENTRYPOINT"
  echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT"
  echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT";
fi
chmod -R 777 /neurodocker && chmod a+s /neurodocker

printf '#!/bin/bash\nls -la' > /usr/bin/ll

chmod +x /usr/bin/ll

mkdir 

apt-get update -qq
apt-get install -y -q --no-install-recommends \
    bc \
    bison \
    build-essential \
    cmake \
    flex \
    g++ \
    git \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libjpeg-dev \
    libx11-dev \
    libxi-dev \
    libxi6 \
    libxmu-dev \
    libxmu-headers \
    libxmu6 \
    x11proto-core-dev
apt-get clean
rm -rf /var/lib/apt/lists/*

mkdir src && \
cd src && \
curl -L --output cmake-3.14.5.tar.gz https://github.com/Kitware/CMake/releases/download/v3.14.5/cmake-3.14.5.tar.gz  && \
tar zxf cmake-3.14.5.tar.gz && \
cd cmake-3.14.5 && \
./configure --prefix=/usr --no-qt-gui && \
make && \
make install && \
cd ../../ && \
rm -rf src

git clone --recursive https://github.com/BIC-MNI/minc-toolkit-v2.git minc-toolkit-v2

cd minc-toolkit-v2

git fetch --tags
git checkout release-1.9.17
mkdir build && cd build
cmake .. \
-DCMAKE_BUILD_TYPE:STRING=Release   \
-DCMAKE_INSTALL_PREFIX:PATH=/opt/minc-1.9.17 \
-DMT_BUILD_ABC:BOOL=ON   \
-DMT_BUILD_ANTS:BOOL=ON   \
-DMT_BUILD_C3D:BOOL=ON   \
-DMT_BUILD_ELASTIX:BOOL=ON   \
-DMT_BUILD_IM:BOOL=OFF   \
-DMT_BUILD_ITK_TOOLS:BOOL=ON   \
-DMT_BUILD_LITE:BOOL=OFF   \
-DMT_BUILD_SHARED_LIBS:BOOL=ON   \
-DMT_BUILD_VISUAL_TOOLS:BOOL=ON   \
-DMT_USE_OPENMP:BOOL=ON   \
-DUSE_SYSTEM_FFTW3D:BOOL=OFF   \
-DUSE_SYSTEM_FFTW3F:BOOL=OFF   \
-DUSE_SYSTEM_GLUT:BOOL=OFF   \
-DUSE_SYSTEM_GSL:BOOL=OFF   \
-DUSE_SYSTEM_HDF5:BOOL=OFF   \
-DUSE_SYSTEM_ITK:BOOL=OFF   \
-DUSE_SYSTEM_NETCDF:BOOL=OFF   \
-DUSE_SYSTEM_NIFTI:BOOL=OFF   \
-DUSE_SYSTEM_PCRE:BOOL=OFF   \
-DUSE_SYSTEM_ZLIB:BOOL=OFF 

make -j 12 && make install

test "$(getent passwd neuro)" || useradd --no-user-group --create-home --shell /bin/bash neuro
su - neuro

echo '{
\n  "pkg_manager": "apt",
\n  "instructions": [
\n    [
\n      "base",
\n      "debian:stretch"
\n    ],
\n    [
\n      "user",
\n      "root"
\n    ],
\n    [
\n      "_header",
\n      {
\n        "version": "generic",
\n        "method": "custom"
\n      }
\n    ],
\n    [
\n      "run",
\n      "printf '"'"'#!/bin/bash\\\nls -la'"'"' > /usr/bin/ll"
\n    ],
\n    [
\n      "run",
\n      "chmod +x /usr/bin/ll"
\n    ],
\n    [
\n      "run",
\n      "mkdir "
\n    ],
\n    [
\n      "minc",
\n      {
\n        "version": "1.9.17",
\n        "method": "source"
\n      }
\n    ],
\n    [
\n      "env",
\n      {
\n        "DEPLOY_PATH": "/opt/minc-1.9.17/bin/"
\n      }
\n    ],
\n    [
\n      "user",
\n      "neuro"
\n    ]
\n  ]
\n}' > /neurodocker/neurodocker_specs.json

%environment
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
export ND_ENTRYPOINT="/neurodocker/startup.sh"
export MINC_TOOLKIT="/opt/minc-1.9.17"
export MINC_TOOLKIT_VERSION="/opt/minc-1.9.17"
export PATH="/opt/minc-1.9.17/bin:/opt/minc-1.9.17/pipeline:$PATH"
export PERL5LIB="/opt/minc-1.9.17/perl:/opt/minc-1.9.17/pipeline:$PERL5LIB"
export LD_LIBRARY_PATH="/opt/minc-1.9.17/lib:/opt/minc-1.9.17/lib/InsightToolkit:$LD_LIBRARY_PATH"
export MNI_DATAPATH="/opt/minc-1.9.17/share"
export MINC_FORCE_V2="1"
export MINC_COMPRESS="4"
export VOLUME_CACHE_THRESHOLD="-1"
export MANPATH="/opt/minc-1.9.17/man:$MANPATH"
export DEPLOY_PATH="/opt/minc-1.9.17/bin/"

%runscript
/neurodocker/startup.sh "$@"
